package validator

import "testing"
import "example.com/message"
import "example.com/blockHeader"


func createBlockHeader() blockHeader.BlockHeader {
//	blockHash := "000000000003ba27aa200b1cecaad478d2b00432346c3f1f3986da1afd33e506"
//
//	nonce := "274148111"
//	time:= "1293623863"
//
	return  blockHeader.BlockHeader{
		Version: "00000001",
		MerkleRoot: "f3e94742aca4b5ef85488dc37c06c3282295ffec960994b2c0d5ac2a25a95766",
		Time: "1293623863",
		Difficulty: "1b04864c",
		PreviousBlockHash: "000000000002d01c1fccc21636b607dfd930d31d01c3a62104612a1719011250",
	}
}


func createValidatorMessage() message.NewValidator {
	bh := createBlockHeader()
	return message.NewValidator {
		BH: bh,
		HashRate: "10",
		Limit: "100",
		Diff: "32",
	}
}



func TestCreateValidateCloseValidator(t *testing.T) {
	//tests the following steps
	//1. validator is created
	//2. hash is sent to validator to be validated
	//3. result of validator is analyzed
	//4. validator is closed


	//create validator

	//pass hash message to validator

	//confirm hash is valid

	//close validator
}

func TestCreateValidateBadHashErrorClose(t *testing.T) {
	//tests the following steps
	//1. validator is created
	//2. hash is sent to validator to be validated
	//3. result of validator is analyzed
	//4. validator is closed


	//create validator

	//pass hash message to validator

	//confirm hash is invalid

	//close validator
}

func TestObtainHashRateFromValidator(t *testing.T) {
	//tests the following steps
	//1. validator is created
	//2. send hashes to simulate rate of 10 TH/s
	//3. confirm that hashrate is between 9 and 11 TH/s
	//4. validator is closed


	//create validator

	//pass hash message to validator

	//confirm hash is valid

	//close validator
}


